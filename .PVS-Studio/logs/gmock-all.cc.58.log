{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __PTRDIFF_TYPE__ ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_ptrdiff_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __SIZE_TYPE__ size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_size_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1061","currLine":"namespace std {","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"typedef decltype(nullptr) nullptr_t;","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_nullptr_t.h","lines":[20]}],"prevLine":"#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)","sastId":"CERT-DCL58-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __PTRDIFF_TYPE__ ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_ptrdiff_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __SIZE_TYPE__ size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_size_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1061","currLine":"namespace std {","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"typedef decltype(nullptr) nullptr_t;","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_nullptr_t.h","lines":[20]}],"prevLine":"#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)","sastId":"CERT-DCL58-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __PTRDIFF_TYPE__ ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_ptrdiff_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __SIZE_TYPE__ size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_size_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1061","currLine":"namespace std {","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"typedef decltype(nullptr) nullptr_t;","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_nullptr_t.h","lines":[20]}],"prevLine":"#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)","sastId":"CERT-DCL58-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class GTEST_API_ RE {","falseAlarm":false,"level":2,"message":"The 'RE' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h","lines":[891]}],"prevLine":"// Regular Expression syntax."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ThreadWithParam() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h","lines":[1482]}],"prevLine":"      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"  FilePath() : pathname_(\"\") {}","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'pathname_(\"\")' with 'pathname_()'.","nextLine":"  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) {}","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-filepath.h","lines":[66]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V837","currLine":"    registered_tests_.insert(","falseAlarm":false,"level":2,"message":"The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function.","nextLine":"        ::std::make_pair(test_name, CodeLocation(file, line)));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[611]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"    registered_tests_.insert(","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'registered_tests_' container. Consider replacing methods: 'insert' -> 'emplace'.","nextLine":"        ::std::make_pair(test_name, CodeLocation(file, line)));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[611]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V783","currLine":"    return it->second;","cwe":119,"falseAlarm":false,"level":3,"message":"Dereferencing of the invalid iterator 'it' might take place.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[623]}],"prevLine":"    GTEST_CHECK_(it != registered_tests_.end());","sastId":"CERT-CTR51-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V802","currLine":"class NativeArray {","falseAlarm":false,"level":2,"message":"On 32-bit platform, structure size can be reduced from 24 to 16 bytes by rearranging the fields according to their sizes in decreasing order.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[1097]}],"prevLine":"template <typename Element>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class NativeArray {","falseAlarm":false,"level":2,"message":"The 'NativeArray' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[1097]}],"prevLine":"template <typename Element>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  explicit Matcher() {}  // NOLINT","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[504]}],"prevLine":"  // cannot use it until a valid value has been assigned to it."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[533]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[555]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[583]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[609]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  TestPartResultArray() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-test-part.h","lines":[134]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ParamIteratorInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"  // A pointer to the base generator instance.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[97]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ParamGeneratorInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[171]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ~RangeGenerator() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[215]}],"prevLine":"        end_index_(CalculateEndIndex(begin, end, step)) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class RangeGenerator : public ParamGeneratorInterface<T> {","falseAlarm":false,"level":3,"message":"The copy assignment operator is declared as private in the 'RangeGenerator' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[208]}],"prevLine":"template <typename T, typename IncrementT>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"  class Iterator : public ParamIteratorInterface<T> {","falseAlarm":false,"level":2,"message":"The copy constructor is declared as private in the 'Iterator' class, but the default copy assignment operator will still be generated by compiler. It is dangerous to use such a class.","nextLine":"   public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[311]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ~ValuesInIteratorRangeGenerator() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[299]}],"prevLine":"      : container_(begin, end) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {","falseAlarm":false,"level":3,"message":"The copy assignment operator is declared as private in the 'ValuesInIteratorRangeGenerator' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[294]}],"prevLine":"template <typename T>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~TestMetaFactoryBase() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[420]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  TestMetaFactory() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[439]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V824","currLine":"    tests_.push_back(std::shared_ptr<TestInfo>(new TestInfo(","falseAlarm":false,"level":1,"message":"It is recommended to use the 'make_shared' function to create smart pointers.","nextLine":"        test_suite_name, test_base_name, meta_factory, code_location)));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[532]}],"prevLine":"                      CodeLocation code_location) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"    instantiations_.push_back(","falseAlarm":false,"level":1,"message":"Decreased performance. Object may be created in-place in the 'instantiations_' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"        InstantiationInfo(instantiation_name, func, name_func, file, line));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[541]}],"prevLine":"                                const char* file, int line) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ParameterizedTestSuiteRegistry() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  ~ParameterizedTestSuiteRegistry() {","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[691]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ~CartesianProductGenerator() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[830]}],"prevLine":"      : generators_(g) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"    ~IteratorImpl() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[855]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~WithParamInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest.h","lines":[1656]}],"prevLine":"  typedef T ParamType;"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ActionInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  virtual ~ActionInterface() {}","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[705]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ActionInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[706]}],"prevLine":"  ActionInterface() {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Action() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[755]}],"prevLine":"  // STL containers."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Cardinality() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-cardinalities.h","lines":[95]}],"prevLine":"  // objects in STL containers."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"  if (explanation != \"\" && os != nullptr) {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'explanation != \"\"' with '!explanation.empty()'.","nextLine":"    *os << \", \" << explanation;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[564]}],"prevLine":"                            ::std::ostream* os) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      matchers.push_back(MatcherCast<RawU>(matcher));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[1476]}],"prevLine":"    for (const auto& matcher : matchers_) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"    if (explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'explanation != \"\"' with '!explanation.empty()'.","nextLine":"      *listener << \"whose first field is a value \" << explanation;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[2966]}],"prevLine":"    const std::string explanation = inner_listener.str();"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"    if (first_explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'first_explanation != \"\"' with '!first_explanation.empty()'.","nextLine":"      *listener << \", where the first field is a value \" << first_explanation;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3113]}],"prevLine":"    *listener << \"whose both fields match\";"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"    if (second_explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'second_explanation != \"\"' with '!second_explanation.empty()'.","nextLine":"      *listener << \", \";","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3116]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"      if (first_explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'first_explanation != \"\"' with '!first_explanation.empty()'.","nextLine":"        *listener << \"and \";","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3118]}],"prevLine":"      *listener << \", \";"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      matchers_.push_back(MatcherCast<const Element&>(*first++));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers_' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3361]}],"prevLine":"    while (first != last) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      matchers_.push_back(MatcherCast<const Element&>(*first));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers_' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3607]}],"prevLine":"    for (; first != last; ++first) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class BoundSecondMatcher {","falseAlarm":false,"level":3,"message":"The 'BoundSecondMatcher' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3803]}],"prevLine":"template <typename Tuple2Matcher, typename Second>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V550","currLine":"        if (value == expected_) {","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of FloatingEqMatcher < double >: Instantiation of Impl < double >: An odd precise comparison: value == expected_. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"          return true;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[1692]}],"prevLine":"        // which should only match if max_abs_error_ is also infinity.","sastId":"CERT-FLP02-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V550","currLine":"      if (max_abs_error_ == -1) {","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of FloatingEq2Matcher < float >: An odd precise comparison: max_abs_error_ == - 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"        FloatingEqMatcher<FloatType> fm(::std::get<0>(args), nan_eq_nan_);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[1829]}],"prevLine":"                         MatchResultListener* listener) const override {","sastId":"CERT-FLP02-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"    matchers.push_back(internal::MatcherBindSecond(tuple2_matcher, *it));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[4773]}],"prevLine":"       ++it) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ExpectationSet() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[565]}],"prevLine":"  // Constructs an empty set."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  FunctionMocker() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[1383]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V821","currLine":"    const std::string message =","falseAlarm":false,"level":3,"message":"Decreased performance. The 'message' variable can be constructed in a lower level scope.","nextLine":"        call_description +","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[1437,1442]}],"prevLine":"    }","sastId":"CERT-DCL19-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V824","currLine":"    const std::shared_ptr<ExpectationBase> untyped_expectation(expectation);","falseAlarm":false,"level":1,"message":"It is recommended to use the 'make_shared' function to create smart pointers.","nextLine":"    // See the definition of untyped_expectations_ for why access to","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[1511]}],"prevLine":"        new TypedExpectation<F>(this, file, line, source_text, m);"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"MATCHER(IsEmpty, negation ? \"isn't empty\" : \"is empty\") {","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  if (arg.empty()) {","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-more-matchers.h","lines":[61]}],"prevLine":"// support both size() and empty(), which all STL-like containers provide."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"MATCHER(IsTrue, negation ? \"is false\" : \"is true\") {","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  return static_cast<bool>(arg);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-more-matchers.h","lines":[73]}],"prevLine":"// and false."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"MATCHER(IsFalse, negation ? \"is true\" : \"is false\") {","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  return !static_cast<bool>(arg);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-more-matchers.h","lines":[81]}],"prevLine":"// and false."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::AllowUninterestingCalls(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[114]}],"prevLine":"  NiceMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::UnregisterCallReaction(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[118]}],"prevLine":"  ~NiceMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::WarnUninterestingCalls(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[126]}],"prevLine":"  NaggyMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::UnregisterCallReaction(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[130]}],"prevLine":"  ~NaggyMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::FailUninterestingCalls(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[138]}],"prevLine":"  StrictMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::UnregisterCallReaction(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[142]}],"prevLine":"  ~StrictMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"      if (starts_new_word && result != \"\") result += ' ';","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the expression 'result != \"\"' with '!result.empty()'.","nextLine":"      result += ToLower(*p);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-internal-utils.cc","lines":[92]}],"prevLine":"    if (IsAlNum(*p)) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      result.push_back(ElementMatcherPair(ilhs, irhs));","falseAlarm":false,"level":1,"message":"Decreased performance. Object may be created in-place in the 'result' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-matchers.cc","lines":[162]}],"prevLine":"      if (irhs == kUnused) continue;"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"      if (state.first_used_test != \"\") {","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the expression 'state.first_used_test != \"\"' with '!state.first_used_test.empty()'.","nextLine":"        std::cout << \" (used in test \" << state.first_used_test_suite << \".\"","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[501]}],"prevLine":"      std::cout << \" ERROR: this mock object\";"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"              reinterpret_cast<uintptr_t>(mock_obj)) == 0)","cwe":704,"falseAlarm":false,"level":2,"message":"The 'mock_obj' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"             ? internal::intToCallReaction(","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[592]}],"prevLine":"  return (UninterestingCallReactionMap().count(","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"             : UninterestingCallReactionMap()[reinterpret_cast<uintptr_t>(","cwe":704,"falseAlarm":false,"level":2,"message":"The 'mock_obj' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"                   mock_obj)];","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[595]}],"prevLine":"                   GMOCK_FLAG_GET(default_mock_behavior))","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V807","currLine":"           g_mock_object_registry.states().begin();","falseAlarm":false,"level":3,"message":"Decreased performance. Consider creating a reference to avoid using the 'g_mock_object_registry.states()' expression repeatedly.","nextLine":"       it != g_mock_object_registry.states().end(); ++it) {","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[703,704,709]}],"prevLine":"  for (MockObjectRegistry::StateMap::iterator it ="}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"Expectation::Expectation() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[739]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"Expectation::~Expectation() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[745]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V836","currLine":"    GMOCK_INTERNAL_PARSE_FLAG(verbose)","falseAlarm":false,"level":1,"message":"Expression's value is copied at the 'value' variable declaration. The variable is never modified.","nextLine":"    GMOCK_INTERNAL_PARSE_FLAG(default_mock_behavior)","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock.cc","lines":[168]}],"prevLine":"    GMOCK_INTERNAL_PARSE_FLAG(catch_leaked_mocks)"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V820","currLine":"    GMOCK_INTERNAL_PARSE_FLAG(verbose)","falseAlarm":false,"level":2,"message":"The 'value' variable is not used after copying. Copying can be replaced with move/swap for optimization.","nextLine":"    GMOCK_INTERNAL_PARSE_FLAG(default_mock_behavior)","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock.cc","lines":[168]}],"prevLine":"    GMOCK_INTERNAL_PARSE_FLAG(catch_leaked_mocks)"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V524","currLine":"internal::SetArgumentPointeeAction<N, T> SetArgumentPointee(T value) {","falseAlarm":false,"level":3,"message":"It is odd that the body of 'SetArgumentPointee' function is fully equivalent to the body of 'SetArgPointee' function.","nextLine":"  return {std::move(value)};","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[1918,1912]}],"prevLine":"template <size_t N, typename T>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V730","currLine":"  explicit Mutex(StaticConstructorSelector /*dummy*/) {}","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: owner_thread_id_, type_, critical_section_init_phase_, critical_section_.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h","lines":[1358]}],"prevLine":"  // ThreadSafeLazyInit() to lazily initialize the rest of the members.","sastId":"CERT-EXP53-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1071","currLine":"  bool MatchAndExplain(const T& x, MatchResultListener* listener) const {","falseAlarm":false,"level":2,"message":"Consider inspecting the 'MatchAndExplain' function. The return value is not always used. Total calls: 25, discarded results: 1.","nextLine":"    GTEST_CHECK_(vtable_ != nullptr);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[268,294]}],"prevLine":"  // match result to 'listener'."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __PTRDIFF_TYPE__ ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_ptrdiff_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __SIZE_TYPE__ size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_size_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1061","currLine":"namespace std {","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"typedef decltype(nullptr) nullptr_t;","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_nullptr_t.h","lines":[20]}],"prevLine":"#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)","sastId":"CERT-DCL58-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __PTRDIFF_TYPE__ ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_ptrdiff_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __SIZE_TYPE__ size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_size_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1061","currLine":"namespace std {","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"typedef decltype(nullptr) nullptr_t;","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_nullptr_t.h","lines":[20]}],"prevLine":"#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)","sastId":"CERT-DCL58-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __PTRDIFF_TYPE__ ptrdiff_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'ptrdiff_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_ptrdiff_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V677","currLine":"typedef __SIZE_TYPE__ size_t;","falseAlarm":false,"level":2,"message":"Custom declaration of a standard 'size_t' type. The system header file should be used: #include <CRTDEFS.H>.","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_size_t.h","lines":[18]}],"sastId":"CERT-DCL37-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1061","currLine":"namespace std {","falseAlarm":false,"level":2,"message":"Extending the 'std' namespace may result in undefined behavior.","nextLine":"typedef decltype(nullptr) nullptr_t;","positions":[{"file":"C:\\Program Files\\clang+llvm-19.1.6\\lib\\clang\\19\\include\\__stddef_nullptr_t.h","lines":[20]}],"prevLine":"#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)","sastId":"CERT-DCL58-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class GTEST_API_ RE {","falseAlarm":false,"level":2,"message":"The 'RE' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h","lines":[891]}],"prevLine":"// Regular Expression syntax."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ThreadWithParam() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h","lines":[1482]}],"prevLine":"      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"  FilePath() : pathname_(\"\") {}","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'pathname_(\"\")' with 'pathname_()'.","nextLine":"  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) {}","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-filepath.h","lines":[66]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V837","currLine":"    registered_tests_.insert(","falseAlarm":false,"level":2,"message":"The 'insert' function does not guarantee that arguments will not be copied or moved if there is no insertion. Consider using the 'try_emplace' function.","nextLine":"        ::std::make_pair(test_name, CodeLocation(file, line)));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[611]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"    registered_tests_.insert(","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'registered_tests_' container. Consider replacing methods: 'insert' -> 'emplace'.","nextLine":"        ::std::make_pair(test_name, CodeLocation(file, line)));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[611]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V783","currLine":"    return it->second;","cwe":119,"falseAlarm":false,"level":3,"message":"Dereferencing of the invalid iterator 'it' might take place.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[623]}],"prevLine":"    GTEST_CHECK_(it != registered_tests_.end());","sastId":"CERT-CTR51-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V802","currLine":"class NativeArray {","falseAlarm":false,"level":2,"message":"On 32-bit platform, structure size can be reduced from 24 to 16 bytes by rearranging the fields according to their sizes in decreasing order.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[1097]}],"prevLine":"template <typename Element>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class NativeArray {","falseAlarm":false,"level":2,"message":"The 'NativeArray' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h","lines":[1097]}],"prevLine":"template <typename Element>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  explicit Matcher() {}  // NOLINT","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[504]}],"prevLine":"  // cannot use it until a valid value has been assigned to it."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[533]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[555]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[583]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Matcher() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[609]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  TestPartResultArray() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-test-part.h","lines":[134]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ParamIteratorInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","nextLine":"  // A pointer to the base generator instance.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[97]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ParamGeneratorInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[171]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ~RangeGenerator() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[215]}],"prevLine":"        end_index_(CalculateEndIndex(begin, end, step)) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class RangeGenerator : public ParamGeneratorInterface<T> {","falseAlarm":false,"level":3,"message":"The copy assignment operator is declared as private in the 'RangeGenerator' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[208]}],"prevLine":"template <typename T, typename IncrementT>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"  class Iterator : public ParamIteratorInterface<T> {","falseAlarm":false,"level":2,"message":"The copy constructor is declared as private in the 'Iterator' class, but the default copy assignment operator will still be generated by compiler. It is dangerous to use such a class.","nextLine":"   public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[311]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ~ValuesInIteratorRangeGenerator() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[299]}],"prevLine":"      : container_(begin, end) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {","falseAlarm":false,"level":3,"message":"The copy assignment operator is declared as private in the 'ValuesInIteratorRangeGenerator' class, but the default copy constructor will still be generated by compiler. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[294]}],"prevLine":"template <typename T>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~TestMetaFactoryBase() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[420]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  TestMetaFactory() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[439]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V824","currLine":"    tests_.push_back(std::shared_ptr<TestInfo>(new TestInfo(","falseAlarm":false,"level":1,"message":"It is recommended to use the 'make_shared' function to create smart pointers.","nextLine":"        test_suite_name, test_base_name, meta_factory, code_location)));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[532]}],"prevLine":"                      CodeLocation code_location) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"    instantiations_.push_back(","falseAlarm":false,"level":1,"message":"Decreased performance. Object may be created in-place in the 'instantiations_' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"        InstantiationInfo(instantiation_name, func, name_func, file, line));","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[541]}],"prevLine":"                                const char* file, int line) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ParameterizedTestSuiteRegistry() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  ~ParameterizedTestSuiteRegistry() {","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[691]}],"prevLine":" public:"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ~CartesianProductGenerator() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[830]}],"prevLine":"      : generators_(g) {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"    ~IteratorImpl() override {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h","lines":[855]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~WithParamInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest.h","lines":[1656]}],"prevLine":"  typedef T ParamType;"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ActionInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  virtual ~ActionInterface() {}","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[705]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  virtual ~ActionInterface() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[706]}],"prevLine":"  ActionInterface() {}"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Action() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[755]}],"prevLine":"  // STL containers."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  Cardinality() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-cardinalities.h","lines":[95]}],"prevLine":"  // objects in STL containers."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"  if (explanation != \"\" && os != nullptr) {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'explanation != \"\"' with '!explanation.empty()'.","nextLine":"    *os << \", \" << explanation;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[564]}],"prevLine":"                            ::std::ostream* os) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      matchers.push_back(MatcherCast<RawU>(matcher));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[1476]}],"prevLine":"    for (const auto& matcher : matchers_) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"    if (explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'explanation != \"\"' with '!explanation.empty()'.","nextLine":"      *listener << \"whose first field is a value \" << explanation;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[2966]}],"prevLine":"    const std::string explanation = inner_listener.str();"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"    if (first_explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'first_explanation != \"\"' with '!first_explanation.empty()'.","nextLine":"      *listener << \", where the first field is a value \" << first_explanation;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3113]}],"prevLine":"    *listener << \"whose both fields match\";"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"    if (second_explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'second_explanation != \"\"' with '!second_explanation.empty()'.","nextLine":"      *listener << \", \";","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3116]}],"prevLine":"    }"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"      if (first_explanation != \"\") {","falseAlarm":false,"level":3,"message":"Decreased performance. Consider replacing the expression 'first_explanation != \"\"' with '!first_explanation.empty()'.","nextLine":"        *listener << \"and \";","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3118]}],"prevLine":"      *listener << \", \";"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      matchers_.push_back(MatcherCast<const Element&>(*first++));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers_' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3361]}],"prevLine":"    while (first != last) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      matchers_.push_back(MatcherCast<const Element&>(*first));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers_' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3607]}],"prevLine":"    for (; first != last; ++first) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V690","currLine":"class BoundSecondMatcher {","falseAlarm":false,"level":3,"message":"The 'BoundSecondMatcher' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class.","nextLine":" public:","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[3803]}],"prevLine":"template <typename Tuple2Matcher, typename Second>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V550","currLine":"        if (value == expected_) {","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of FloatingEqMatcher < double >: Instantiation of Impl < double >: An odd precise comparison: value == expected_. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"          return true;","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[1692]}],"prevLine":"        // which should only match if max_abs_error_ is also infinity.","sastId":"CERT-FLP02-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V550","currLine":"      if (max_abs_error_ == -1) {","cwe":682,"falseAlarm":false,"level":3,"message":"Instantiation of FloatingEq2Matcher < float >: An odd precise comparison: max_abs_error_ == - 1. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"        FloatingEqMatcher<FloatType> fm(::std::get<0>(args), nan_eq_nan_);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[1829]}],"prevLine":"                         MatchResultListener* listener) const override {","sastId":"CERT-FLP02-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"    matchers.push_back(internal::MatcherBindSecond(tuple2_matcher, *it));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'matchers' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-matchers.h","lines":[4773]}],"prevLine":"       ++it) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  ExpectationSet() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[565]}],"prevLine":"  // Constructs an empty set."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"  FunctionMocker() {}","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[1383]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V821","currLine":"    const std::string message =","falseAlarm":false,"level":3,"message":"Decreased performance. The 'message' variable can be constructed in a lower level scope.","nextLine":"        call_description +","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[1437,1442]}],"prevLine":"    }","sastId":"CERT-DCL19-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V824","currLine":"    const std::shared_ptr<ExpectationBase> untyped_expectation(expectation);","falseAlarm":false,"level":1,"message":"It is recommended to use the 'make_shared' function to create smart pointers.","nextLine":"    // See the definition of untyped_expectations_ for why access to","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-spec-builders.h","lines":[1511]}],"prevLine":"        new TypedExpectation<F>(this, file, line, source_text, m);"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"MATCHER(IsEmpty, negation ? \"isn't empty\" : \"is empty\") {","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  if (arg.empty()) {","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-more-matchers.h","lines":[61]}],"prevLine":"// support both size() and empty(), which all STL-like containers provide."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"MATCHER(IsTrue, negation ? \"is false\" : \"is true\") {","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  return static_cast<bool>(arg);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-more-matchers.h","lines":[73]}],"prevLine":"// and false."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"MATCHER(IsFalse, negation ? \"is true\" : \"is false\") {","falseAlarm":false,"level":3,"message":"It's better to use '= default;' syntax instead of empty constructor body.","nextLine":"  return !static_cast<bool>(arg);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-more-matchers.h","lines":[81]}],"prevLine":"// and false."}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::AllowUninterestingCalls(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[114]}],"prevLine":"  NiceMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::UnregisterCallReaction(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[118]}],"prevLine":"  ~NiceMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::WarnUninterestingCalls(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[126]}],"prevLine":"  NaggyMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::UnregisterCallReaction(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[130]}],"prevLine":"  ~NaggyMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::FailUninterestingCalls(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[138]}],"prevLine":"  StrictMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"    ::testing::Mock::UnregisterCallReaction(reinterpret_cast<uintptr_t>(this));","cwe":704,"falseAlarm":false,"level":2,"message":"The 'this' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"  }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-nice-strict.h","lines":[142]}],"prevLine":"  ~StrictMockImpl() {","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"      if (starts_new_word && result != \"\") result += ' ';","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the expression 'result != \"\"' with '!result.empty()'.","nextLine":"      result += ToLower(*p);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-internal-utils.cc","lines":[92]}],"prevLine":"    if (IsAlNum(*p)) {"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V823","currLine":"      result.push_back(ElementMatcherPair(ilhs, irhs));","falseAlarm":false,"level":1,"message":"Decreased performance. Object may be created in-place in the 'result' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"    }","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-matchers.cc","lines":[162]}],"prevLine":"      if (irhs == kUnused) continue;"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V815","currLine":"      if (state.first_used_test != \"\") {","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the expression 'state.first_used_test != \"\"' with '!state.first_used_test.empty()'.","nextLine":"        std::cout << \" (used in test \" << state.first_used_test_suite << \".\"","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[501]}],"prevLine":"      std::cout << \" ERROR: this mock object\";"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"              reinterpret_cast<uintptr_t>(mock_obj)) == 0)","cwe":704,"falseAlarm":false,"level":2,"message":"The 'mock_obj' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"             ? internal::intToCallReaction(","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[592]}],"prevLine":"  return (UninterestingCallReactionMap().count(","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1091","currLine":"             : UninterestingCallReactionMap()[reinterpret_cast<uintptr_t>(","cwe":704,"falseAlarm":false,"level":2,"message":"The 'mock_obj' pointer is cast to an integer type of a larger size. The result of this conversion is implementation-defined.","nextLine":"                   mock_obj)];","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[595]}],"prevLine":"                   GMOCK_FLAG_GET(default_mock_behavior))","sastId":"CERT-INT36-C"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V807","currLine":"           g_mock_object_registry.states().begin();","falseAlarm":false,"level":3,"message":"Decreased performance. Consider creating a reference to avoid using the 'g_mock_object_registry.states()' expression repeatedly.","nextLine":"       it != g_mock_object_registry.states().end(); ++it) {","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[703,704,709]}],"prevLine":"  for (MockObjectRegistry::StateMap::iterator it ="}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"Expectation::Expectation() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty constructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[739]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V832","currLine":"Expectation::~Expectation() {}","falseAlarm":false,"level":2,"message":"It's better to use '= default;' syntax instead of empty destructor body.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-spec-builders.cc","lines":[745]}]}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V836","currLine":"    GMOCK_INTERNAL_PARSE_FLAG(verbose)","falseAlarm":false,"level":1,"message":"Expression's value is copied at the 'value' variable declaration. The variable is never modified.","nextLine":"    GMOCK_INTERNAL_PARSE_FLAG(default_mock_behavior)","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock.cc","lines":[168]}],"prevLine":"    GMOCK_INTERNAL_PARSE_FLAG(catch_leaked_mocks)"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V820","currLine":"    GMOCK_INTERNAL_PARSE_FLAG(verbose)","falseAlarm":false,"level":2,"message":"The 'value' variable is not used after copying. Copying can be replaced with move/swap for optimization.","nextLine":"    GMOCK_INTERNAL_PARSE_FLAG(default_mock_behavior)","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock.cc","lines":[168]}],"prevLine":"    GMOCK_INTERNAL_PARSE_FLAG(catch_leaked_mocks)"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V524","currLine":"internal::SetArgumentPointeeAction<N, T> SetArgumentPointee(T value) {","falseAlarm":false,"level":3,"message":"It is odd that the body of 'SetArgumentPointee' function is fully equivalent to the body of 'SetArgPointee' function.","nextLine":"  return {std::move(value)};","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\include\\gmock\\gmock-actions.h","lines":[1918,1912]}],"prevLine":"template <size_t N, typename T>"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V730","currLine":"  explicit Mutex(StaticConstructorSelector /*dummy*/) {}","cwe":457,"falseAlarm":false,"level":2,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: owner_thread_id_, type_, critical_section_init_phase_, critical_section_.","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h","lines":[1358]}],"prevLine":"  // ThreadSafeLazyInit() to lazily initialize the rest of the members.","sastId":"CERT-EXP53-CPP"}
{"analyzedSourceFiles":["C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googlemock\\src\\gmock-all.cc"],"code":"V1071","currLine":"  bool MatchAndExplain(const T& x, MatchResultListener* listener) const {","falseAlarm":false,"level":2,"message":"Consider inspecting the 'MatchAndExplain' function. The return value is not always used. Total calls: 25, discarded results: 1.","nextLine":"    GTEST_CHECK_(vtable_ != nullptr);","positions":[{"file":"C:\\Users\\U439644\\CLionProjects\\Kangaroo\\cpm_source_cache\\googletest\\c89ee04fa01138c2db034b2627b51a145ba09878\\googletest\\googletest\\include\\gtest\\gtest-matchers.h","lines":[268,294]}],"prevLine":"  // match result to 'listener'."}
